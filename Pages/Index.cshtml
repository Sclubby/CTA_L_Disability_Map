@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<head>
    <link rel="stylesheet" type="text/css" href="~/css/map.css" />

    <script  src="~/js/map.js" type="module"> </script>
</head>

<body>

    <div id="line-selector-control" class="map-control">
        <select id="line-selector" class="selector-control">
            <option value="All">All Lines</option>
            <option value="Blue">Blue Line</option>
            <option value="Red">Red Line</option>
            <option value="Yellow">Yellow Line</option>
            <option value="Green">Green Line</option>
            <option value="Purple">Purple Line</option>
            <option value="Orange">Orange Line</option>
            <option value="Brown">Brown Line</option>
        </select>
    </div>

    <div id="type-selector-control" class="map-control">
        <select id="type-selector" class="selector-control">
            <option value="All">Both</option>
            <option value="1">ADA</option>
            <option value="0">non-ADA</option>
        </select>
    </div>

  
    <div id="map"></div>
 

    <script>
        //retrieve info from database and send to map.js to put on map
        var lats = @Html.Raw(Json.Serialize(Model.CombinedTable.Select(p => p.lat)));
        var lons = @Html.Raw(Json.Serialize(Model.CombinedTable.Select(p => p.lon)));
        var names = @Html.Raw(Json.Serialize(Model.CombinedTable.Select(p => p.Station_Name)));
        var ADAs = @Html.Raw(Json.Serialize(Model.CombinedTable.Select(p => p.ADA)));
        var colors = @Html.Raw(Json.Serialize(Model.CombinedTable.Select(p => p.color)));


        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "AIzaSyDLjUflujPTU3XAh3gbb4FtNkl9WvnOr_g", v: "weekly" });
        
 </script>
</body>